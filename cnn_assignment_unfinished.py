# -*- coding: utf-8 -*-
"""CNN_assignment_unfinished.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17OV9StQlDZmXNhVtL3dweQ5P0AS-gwwF
"""

## Step1 : importing the data from git
!git clone https://github.com/YoongiKim/CIFAR-10-images

import torch
from torchvision import datasets, transforms
import matplotlib.pyplot as plt
import numpy as np
import os

## Step2 : Activating CUDA on Google Colab
if torch.cuda.is_available():
  print("CUDA is available. Training on GPU...")
else:
  print("CUDA is not available. Cant train on GPU...")

transform = transforms.Compose([transforms.ToTensor(),
                                transforms.Normalize((0.5,), (0.5,))])

import pandas as pd

pathtrain = "CIFAR-10-images/train/"
pathtest = "CIFAR-10-images/test/"

files_in_train = os.listdir(pathtrain)
files_in_test = os.listdir(pathtest)

train = []; test = []
labels1 = []; labels2 = []

df_train = pd.DataFrame()
df_test = pd.DataFrame()

for folder in files_in_train:
  path = pathtrain + str(folder)
  for image in os.listdir(path):
    train.append(path + str(image))
    labels1.append(str(folder))

for folder in files_in_test:
  path = pathtest + str(folder)
  for image in os.listdir(path):
    test.append(path + str(image))
    labels2.append(str(folder))

df_train['path'] = train
df_train['classes'] = labels1

df_test['path'] = test
df_test['classes'] = labels2

df_train

df_test

df_train.to_csv('train_data.csv',index=False)
df_test.to_csv('test_data.csv',index=False)

import csv
import imageio

class MyDataset():
  def __init__(self,image_set,argument=True):
    with open(image_set,"r") as csv_handle:
      csv_reader = csv.reader(csv_handle,delimiter=",")
      self.imgfiles=[eachline[0] for eachline in csv_reader]
    self.argument=argument
  def __len__(self):
    return len(self.imgfiles)
  def do_your_transform(img):
    img1 = transforms.Compose([transforms.RandomHorizontalFlip(),
                               transforms.RandomRotation(10),
                               transforms.ToTensor(),
                               transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))
                               ])
    return img1
  def __gititem__(self,idx):
    img=imageio.imread(self.imgfiles[idx])
    X=np.asarray(img,dtype=np.float32)
    if self.argument:
      X=do_your_transform(X)
    Y=self.classlabels[idx]
    return X,Y

train_data = MyDataset("train_data.csv")

trainloader = torch.utils.data.DataLoader(train_data, batch_size = 64, shuffle = True)

images, labels = next(iter(trainloader))
print(images.shape)

